{"version":3,"file":"deckgl_react-Azql1Hzl.js","sources":["../../node_modules/@deck.gl/react/dist/utils/use-isomorphic-layout-effect.js","../../node_modules/@deck.gl/react/dist/utils/inherits-from.js","../../node_modules/@deck.gl/react/dist/utils/evaluate-children.js","../../node_modules/@deck.gl/react/dist/utils/extract-jsx-layers.js","../../node_modules/@deck.gl/react/dist/utils/deckgl-context.js","../../node_modules/@deck.gl/react/dist/utils/position-children-under-views.js","../../node_modules/@deck.gl/react/dist/utils/extract-styles.js","../../node_modules/@deck.gl/react/dist/deckgl.js"],"sourcesContent":["// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// From https://github.com/streamich/react-use/blob/master/src/useIsomorphicLayoutEffect.ts\n// useLayoutEffect but does not trigger warning in server-side rendering\nimport { useEffect, useLayoutEffect } from 'react';\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\nexport default useIsomorphicLayoutEffect;\n//# sourceMappingURL=use-isomorphic-layout-effect.js.map","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Check if one JavaScript class inherits from another\nexport function inheritsFrom(Type, ParentType) {\n    while (Type) {\n        if (Type === ParentType) {\n            return true;\n        }\n        Type = Object.getPrototypeOf(Type);\n    }\n    return false;\n}\n//# sourceMappingURL=inherits-from.js.map","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { cloneElement } from 'react';\nconst MAP_STYLE = { position: 'absolute', zIndex: -1 };\nexport default function evaluateChildren(children, childProps) {\n    if (typeof children === 'function') {\n        return children(childProps);\n    }\n    if (Array.isArray(children)) {\n        return children.map(child => evaluateChildren(child, childProps));\n    }\n    if (isComponent(children)) {\n        // Special treatment for react-map-gl's Map component\n        // to support shorthand use case <DeckGL><StaticMap /></DeckGL>\n        if (isReactMap(children)) {\n            // Place map under the canvas\n            childProps.style = MAP_STYLE;\n            return cloneElement(children, childProps);\n        }\n        if (needsDeckGLViewProps(children)) {\n            return cloneElement(children, childProps);\n        }\n    }\n    return children;\n}\nexport function isComponent(child) {\n    return (child && typeof child === 'object' && 'type' in child) || false;\n}\nfunction isReactMap(child) {\n    return child.props?.mapStyle;\n}\nfunction needsDeckGLViewProps(child) {\n    const componentClass = child.type;\n    // @ts-expect-error deckGLViewProps is a custom hack defined on the constructor (nebula.gl)\n    return componentClass && componentClass.deckGLViewProps;\n}\n//# sourceMappingURL=evaluate-children.js.map","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport * as React from 'react';\nimport { createElement } from 'react';\nimport { inheritsFrom } from \"./inherits-from.js\";\nimport { Layer, View } from '@deck.gl/core';\nimport { isComponent } from \"./evaluate-children.js\";\n// recursively wrap render callbacks in `View`\nfunction wrapInView(node) {\n    if (typeof node === 'function') {\n        // React.Children does not traverse functions.\n        // All render callbacks must be protected under a <View>\n        // @ts-expect-error View is not a ReactJSXElement constructor. Only used as a temporary wrapper and will be removed in extractJSXLayers\n        return createElement(View, {}, node);\n    }\n    if (Array.isArray(node)) {\n        return node.map(wrapInView);\n    }\n    if (isComponent(node)) {\n        if (node.type === React.Fragment) {\n            return wrapInView(node.props.children);\n        }\n        if (inheritsFrom(node.type, View)) {\n            return node;\n        }\n    }\n    return node;\n}\n// extracts any deck.gl layers masquerading as react elements from props.children\nexport default function extractJSXLayers({ children, layers = [], views = null }) {\n    const reactChildren = []; // extract real react elements (i.e. not deck.gl layers)\n    const jsxLayers = []; // extracted layer from react children, will add to deck.gl layer array\n    const jsxViews = {};\n    // React.children\n    React.Children.forEach(wrapInView(children), reactElement => {\n        if (isComponent(reactElement)) {\n            // For some reason Children.forEach doesn't filter out `null`s\n            const ElementType = reactElement.type;\n            if (inheritsFrom(ElementType, Layer)) {\n                const layer = createLayer(ElementType, reactElement.props);\n                jsxLayers.push(layer);\n            }\n            else {\n                reactChildren.push(reactElement);\n            }\n            // empty id => default view\n            if (inheritsFrom(ElementType, View) && ElementType !== View && reactElement.props.id) {\n                // @ts-ignore Cannot instantiate an abstract class (View)\n                const view = new ElementType(reactElement.props);\n                jsxViews[view.id] = view;\n            }\n        }\n        else if (reactElement) {\n            reactChildren.push(reactElement);\n        }\n    });\n    // Avoid modifying views if no JSX views were found\n    if (Object.keys(jsxViews).length > 0) {\n        // If a view is specified in both views prop and JSX, use the one in views\n        if (Array.isArray(views)) {\n            views.forEach(view => {\n                jsxViews[view.id] = view;\n            });\n        }\n        else if (views) {\n            jsxViews[views.id] = views;\n        }\n        views = Object.values(jsxViews);\n    }\n    // Avoid modifying layers array if no JSX layers were found\n    layers = jsxLayers.length > 0 ? [...jsxLayers, ...layers] : layers;\n    return { layers, children: reactChildren, views };\n}\nfunction createLayer(LayerType, reactProps) {\n    const props = {};\n    // Layer.defaultProps is treated as ReactElement.defaultProps and merged into react props\n    // Remove them\n    const defaultProps = LayerType.defaultProps || {};\n    for (const key in reactProps) {\n        if (defaultProps[key] !== reactProps[key]) {\n            props[key] = reactProps[key];\n        }\n    }\n    // @ts-ignore Cannot instantiate an abstract class (Layer)\n    return new LayerType(props);\n}\n//# sourceMappingURL=extract-jsx-layers.js.map","import { createContext } from 'react';\n// @ts-ignore\nexport const DeckGlContext = createContext();\n//# sourceMappingURL=deckgl-context.js.map","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { createElement } from 'react';\nimport { View } from '@deck.gl/core';\nimport { inheritsFrom } from \"./inherits-from.js\";\nimport evaluateChildren, { isComponent } from \"./evaluate-children.js\";\nimport { DeckGlContext } from \"./deckgl-context.js\";\n// Iterate over views and reposition children associated with views\n// TODO - Can we supply a similar function for the non-React case?\nexport default function positionChildrenUnderViews({ children, deck, ContextProvider = DeckGlContext.Provider }) {\n    // @ts-expect-error accessing protected property\n    const { viewManager } = deck || {};\n    if (!viewManager || !viewManager.views.length) {\n        return [];\n    }\n    const views = {};\n    const defaultViewId = viewManager.views[0].id;\n    // Sort children by view id\n    for (const child of children) {\n        // Unless child is a View, position / render as part of the default view\n        let viewId = defaultViewId;\n        let viewChildren = child;\n        if (isComponent(child) && inheritsFrom(child.type, View)) {\n            viewId = child.props.id || defaultViewId;\n            viewChildren = child.props.children;\n        }\n        const viewport = viewManager.getViewport(viewId);\n        const viewState = viewManager.getViewState(viewId);\n        // Drop (auto-hide) elements with viewId that are not matched by any current view\n        if (viewport) {\n            viewState.padding = viewport.padding;\n            const { x, y, width, height } = viewport;\n            // Resolve potentially relative dimensions using the deck.gl container size\n            viewChildren = evaluateChildren(viewChildren, {\n                x,\n                y,\n                width,\n                height,\n                viewport,\n                viewState\n            });\n            if (!views[viewId]) {\n                views[viewId] = {\n                    viewport,\n                    children: []\n                };\n            }\n            views[viewId].children.push(viewChildren);\n        }\n    }\n    // Render views\n    return Object.keys(views).map(viewId => {\n        const { viewport, children: viewChildren } = views[viewId];\n        const { x, y, width, height } = viewport;\n        const style = {\n            position: 'absolute',\n            left: x,\n            top: y,\n            width,\n            height\n        };\n        const key = `view-${viewId}`;\n        // If children is passed as an array, React will throw the \"each element in a list needs\n        // a key\" warning. Sending each child as separate arguments removes this requirement.\n        const viewElement = createElement('div', { key, id: key, style }, ...viewChildren);\n        const contextValue = {\n            deck,\n            viewport,\n            // @ts-expect-error accessing protected property\n            container: deck.canvas.offsetParent,\n            // @ts-expect-error accessing protected property\n            eventManager: deck.eventManager,\n            onViewStateChange: params => {\n                params.viewId = viewId;\n                // @ts-expect-error accessing protected method\n                deck._onViewStateChange(params);\n            },\n            widgets: []\n        };\n        const providerKey = `view-${viewId}-context`;\n        return createElement(ContextProvider, { key: providerKey, value: contextValue }, viewElement);\n    });\n}\n//# sourceMappingURL=position-children-under-views.js.map","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst CANVAS_ONLY_STYLES = {\n    mixBlendMode: null\n};\nexport default function extractStyles({ width, height, style }) {\n    // This styling is enforced for correct positioning with children\n    const containerStyle = {\n        position: 'absolute',\n        zIndex: 0,\n        left: 0,\n        top: 0,\n        width,\n        height\n    };\n    // Fill the container\n    const canvasStyle = {\n        left: 0,\n        top: 0\n    };\n    if (style) {\n        for (const key in style) {\n            if (key in CANVAS_ONLY_STYLES) {\n                // apply style to the canvas, but not deck's children, e.g. mix-blend-mode\n                canvasStyle[key] = style[key];\n            }\n            else {\n                // apply style to the container, e.g. position/flow settings\n                containerStyle[key] = style[key];\n            }\n        }\n    }\n    return { containerStyle, canvasStyle };\n}\n//# sourceMappingURL=extract-styles.js.map","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport * as React from 'react';\nimport { createElement, useRef, useState, useMemo, useEffect, useImperativeHandle } from 'react';\nimport { Deck } from '@deck.gl/core';\nimport useIsomorphicLayoutEffect from \"./utils/use-isomorphic-layout-effect.js\";\nimport extractJSXLayers from \"./utils/extract-jsx-layers.js\";\nimport positionChildrenUnderViews from \"./utils/position-children-under-views.js\";\nimport extractStyles from \"./utils/extract-styles.js\";\nfunction getRefHandles(thisRef) {\n    return {\n        get deck() {\n            return thisRef.deck;\n        },\n        // The following method can only be called after ref is available, by which point deck is defined in useEffect\n        pickObject: opts => thisRef.deck.pickObject(opts),\n        pickMultipleObjects: opts => thisRef.deck.pickMultipleObjects(opts),\n        pickObjects: opts => thisRef.deck.pickObjects(opts)\n    };\n}\nfunction redrawDeck(thisRef) {\n    if (thisRef.redrawReason) {\n        // Only redraw if we have received a dirty flag\n        // @ts-expect-error accessing protected method\n        thisRef.deck._drawLayers(thisRef.redrawReason);\n        thisRef.redrawReason = null;\n    }\n}\nfunction createDeckInstance(thisRef, DeckClass, props) {\n    const deck = new DeckClass({\n        ...props,\n        // The Deck's animation loop is independent from React's render cycle, causing potential\n        // synchronization issues. We provide this custom render function to make sure that React\n        // and Deck update on the same schedule.\n        // TODO(ibgreen) - Hack to enable WebGPU as it needs to render quickly to avoid CanvasContext texture from going stale\n        _customRender: props.deviceProps?.adapters?.[0]?.type === 'webgpu'\n            ? undefined\n            : redrawReason => {\n                // Save the dirty flag for later\n                thisRef.redrawReason = redrawReason;\n                // Viewport/view state is passed to child components as props.\n                // If they have changed, we need to trigger a React rerender to update children props.\n                const viewports = deck.getViewports();\n                if (thisRef.lastRenderedViewports !== viewports) {\n                    // Viewports have changed, update children props first.\n                    // This will delay the Deck canvas redraw till after React update (in useLayoutEffect)\n                    // so that the canvas does not get rendered before the child components update.\n                    thisRef.forceUpdate();\n                }\n                else {\n                    redrawDeck(thisRef);\n                }\n            }\n    });\n    return deck;\n}\nfunction DeckGLWithRef(props, ref) {\n    // A mechanism to force redraw\n    const [version, setVersion] = useState(0);\n    // A reference to persistent states\n    const _thisRef = useRef({\n        control: null,\n        version,\n        forceUpdate: () => setVersion(v => v + 1)\n    });\n    const thisRef = _thisRef.current;\n    // DOM refs\n    const containerRef = useRef(null);\n    const canvasRef = useRef(null);\n    // extract any deck.gl layers masquerading as react elements from props.children\n    const jsxProps = useMemo(() => extractJSXLayers(props), [props.layers, props.views, props.children]);\n    // Callbacks\n    let inRender = true;\n    const handleViewStateChange = params => {\n        if (inRender && props.viewState) {\n            // Callback may invoke a state update. Defer callback to after render() to avoid React error\n            // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n            // Store deferred parameters in ref so that we can access it in another render\n            thisRef.viewStateUpdateRequested = params;\n            return null;\n        }\n        thisRef.viewStateUpdateRequested = null;\n        return props.onViewStateChange?.(params);\n    };\n    const handleInteractionStateChange = params => {\n        if (inRender) {\n            // Callback may invoke a state update. Defer callback to after render() to avoid React error\n            // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n            // Store deferred parameters in ref so that we can access it in another render\n            thisRef.interactionStateUpdateRequested = params;\n        }\n        else {\n            thisRef.interactionStateUpdateRequested = null;\n            props.onInteractionStateChange?.(params);\n        }\n    };\n    // Update Deck's props. If Deck needs redraw, this will trigger a call to `_customRender` in\n    // the next animation frame.\n    // Needs to be called both from initial mount, and when new props are received\n    const deckProps = useMemo(() => {\n        const forwardProps = {\n            widgets: [],\n            ...props,\n            // Override user styling props. We will set the canvas style in render()\n            style: null,\n            width: '100%',\n            height: '100%',\n            parent: containerRef.current,\n            canvas: canvasRef.current,\n            layers: jsxProps.layers,\n            views: jsxProps.views,\n            onViewStateChange: handleViewStateChange,\n            onInteractionStateChange: handleInteractionStateChange\n        };\n        // The defaultValue for _customRender is null, which would overwrite the definition\n        // of _customRender. Remove to avoid frequently redeclaring the method here.\n        delete forwardProps._customRender;\n        if (thisRef.deck) {\n            thisRef.deck.setProps(forwardProps);\n        }\n        return forwardProps;\n    }, [props]);\n    useEffect(() => {\n        const DeckClass = props.Deck || Deck;\n        thisRef.deck = createDeckInstance(thisRef, DeckClass, {\n            ...deckProps,\n            parent: containerRef.current,\n            canvas: canvasRef.current\n        });\n        return () => thisRef.deck?.finalize();\n    }, []);\n    useIsomorphicLayoutEffect(() => {\n        // render has just been called. The children are positioned based on the current view state.\n        // Redraw Deck canvas immediately, if necessary, using the current view state, so that it\n        // matches the child components.\n        redrawDeck(thisRef);\n        // Execute deferred callbacks\n        const { viewStateUpdateRequested, interactionStateUpdateRequested } = thisRef;\n        if (viewStateUpdateRequested) {\n            handleViewStateChange(viewStateUpdateRequested);\n        }\n        if (interactionStateUpdateRequested) {\n            handleInteractionStateChange(interactionStateUpdateRequested);\n        }\n        // Force initial render if Deck is initialized\n        if (thisRef.deck?.isInitialized) {\n            thisRef.deck.redraw('Initial render');\n        }\n    });\n    useImperativeHandle(ref, () => getRefHandles(thisRef), []);\n    const currentViewports = thisRef.deck && thisRef.deck.isInitialized ? thisRef.deck.getViewports() : undefined;\n    const { ContextProvider, width = '100%', height = '100%', id, style } = props;\n    const { containerStyle, canvasStyle } = useMemo(() => extractStyles({ width, height, style }), [width, height, style]);\n    // Props changes may lead to 3 types of updates:\n    // 1. Only the WebGL canvas - updated in Deck's render cycle (next animation frame)\n    // 2. Only the DOM - updated in React's lifecycle (now)\n    // 3. Both the WebGL canvas and the DOM - defer React rerender to next animation frame just\n    //    before Deck redraw to ensure perfect synchronization & avoid excessive redraw\n    //    This is because multiple changes may happen to Deck between two frames e.g. transition\n    if ((!thisRef.viewStateUpdateRequested && thisRef.lastRenderedViewports === currentViewports) || // case 2\n        thisRef.version !== version // case 3 just before deck redraws\n    ) {\n        thisRef.lastRenderedViewports = currentViewports;\n        thisRef.version = version;\n        // Render the background elements (typically react-map-gl instances)\n        // using the view descriptors\n        const childrenUnderViews = positionChildrenUnderViews({\n            children: jsxProps.children,\n            deck: thisRef.deck,\n            ContextProvider\n        });\n        const canvas = createElement('canvas', {\n            key: 'canvas',\n            id: id || 'deckgl-overlay',\n            ref: canvasRef,\n            style: canvasStyle\n        });\n        // Render deck.gl as the last child\n        thisRef.control = createElement('div', { id: `${id || 'deckgl'}-wrapper`, ref: containerRef, style: containerStyle }, [canvas, childrenUnderViews]);\n    }\n    inRender = false;\n    return thisRef.control;\n}\nconst DeckGL = React.forwardRef(DeckGLWithRef);\nexport default DeckGL;\n//# sourceMappingURL=deckgl.js.map"],"names":["useIsomorphicLayoutEffect","useLayoutEffect","useEffect","inheritsFrom","Type","ParentType","MAP_STYLE","evaluateChildren","children","childProps","child","isComponent","isReactMap","cloneElement","needsDeckGLViewProps","componentClass","wrapInView","node","createElement","View","React.Fragment","extractJSXLayers","layers","views","reactChildren","jsxLayers","jsxViews","React.Children","reactElement","ElementType","Layer","layer","createLayer","view","LayerType","reactProps","props","defaultProps","key","DeckGlContext","createContext","positionChildrenUnderViews","deck","ContextProvider","viewManager","defaultViewId","viewId","viewChildren","viewport","viewState","x","y","width","height","style","viewElement","contextValue","params","providerKey","CANVAS_ONLY_STYLES","extractStyles","containerStyle","canvasStyle","getRefHandles","thisRef","opts","redrawDeck","createDeckInstance","DeckClass","redrawReason","viewports","DeckGLWithRef","ref","version","setVersion","useState","useRef","v","containerRef","canvasRef","jsxProps","useMemo","inRender","handleViewStateChange","handleInteractionStateChange","deckProps","forwardProps","Deck","viewStateUpdateRequested","interactionStateUpdateRequested","useImperativeHandle","currentViewports","id","childrenUnderViews","canvas","DeckGL","React.forwardRef"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7]}